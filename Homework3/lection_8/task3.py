# Напишите функцию segment
# На вход подается два кортежа с координатами точек (x1, y1), (x2, y2)

# В функции происходит проверка на корректность полученных данных.
# С помощью инструкции try/except as отлавливается исключение Exception. И если это исключение поймано,
<<<<<<< HEAD
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экземпляра класса Exception)
=======
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экзепляра класса Exception)
>>>>>>> 2c1f68da05e915c546c811d1cea8452d8aa8757d
# Если исключения не произошло, то функция возвращает сумму всех координат


# Здесь пишем код

def segment(point1, point2):
    """
    Функция для вычисления суммы координат двух точек и обработки исключений.

    Args:
    point1 (tuple): Кортеж с координатами первой точки в формате (x1, y1).
    point2 (tuple): Кортеж с координатами второй точки в формате (x2, y2).

    Returns:
    int: Сумма всех координат (x1 + y1 + x2 + y2).

    Raises:
    Exception: Если происходит любое исключение во время выполнения (за исключением KeyboardInterrupt и SystemExit),
               функция возвращает текст исключения, записанный задом наперед.
    """
    try:
        x1, y1 = point1
        x2, y2 = point2
        return x1 + y1 + x2 + y2
    except Exception as e:
        return str(e)[::-1]

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    ((2, 3), (4, 5)),
    ((2, -3), (4, 5)),
    ((2, 3), ('4', 5)),
    (('a', 3), (4, 5)),
]

test_data = [
    14,
    8,
    "'rts' dna 'tni' :+ rof )s(epyt dnarepo detroppusnu",
    'rts ot )"tni" ton( rts etanetacnoc ylno nac']


for i, d in enumerate(data):
    assert segment(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')